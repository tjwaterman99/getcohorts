# Build and test the project, and deploy the docs site and PyPI on new 
# releases. The deploy jobs could be sped up by caching the installed
# packages, but they're fast enough for now.

name: CI

on: 
  push:
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2.0.0
      with:
        python-version: '3.7'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
        pip install .
    - name: Run webserver
      run: gunicorn --bind 0.0.0.0:8000 -w 2 -k uvicorn.workers.UvicornWorker --daemon getcohorts.web:app
    - name: Test
      run: |
        coverage run -m pytest
        cat coverage.xml
        CODECOV_TOKEN="${{secrets.CODECOV_TOKEN}}" bash <(curl -s https://codecov.io/bash)
  
  deploy-docker:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2.0.0
      with:
        python-version: '3.7'
    - name: Install GetCohorts
      run: |
        python -m pip install --upgrade pip wheel
        pip install -r requirements.txt
        pip install .
    - name: Build image
      run: |
        docker build . \
          --file Dockerfile \
          --tag docker.pkg.github.com/tjwaterman99/getcohorts/getcohorts:$(python -c "import getcohorts; print(getcohorts.__version__);") \
          --tag docker.pkg.github.com/tjwaterman99/getcohorts/getcohorts:latest \
          --tag getcohorts:$(python -c "import getcohorts; print(getcohorts.__version__);") \
          --tag getcohorts:latest
    - name: Run image
      run: docker run --detach --publish 8000:8000 getcohorts
    - name: Test image
      run: pytest tests/test_api.py
    - name: Deploy versioned image to Docker hub
      if: ${{ github.event_name == 'release' }}
      uses: docker/build-push-action@v1.1.1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        repository: tjwaterman99/getcohorts
        tag_with_ref: true
    - name: Deploy image with 'latest' tag to Docker hub
      if: ${{ github.event_name == 'release' }}
      uses: docker/build-push-action@v1.1.1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        repository: tjwaterman99/getcohorts
        tags: latest
    - name: Deploy image to Github docker repository
      if: ${{ github.event_name == 'release' }}
      uses: docker/build-push-action@v1.1.1
      with:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        registry: docker.pkg.github.com
        repository: tjwaterman99/getcohorts/getcohorts
        tag_with_ref: true

  deploy-heroku:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set APP_NAME
        run: |
          export APP_NAME=gc-$(date +%s)-$GITHUB_RUN_ID
          export GETCOHORTS_API_URL=http://$APP_NAME.herokuapp.com
          echo ::set-env name=APP_NAME::$APP_NAME
          echo ::set-env name=GETCOHORTS_API_URL::$GETCOHORTS_API_URL
      - name: Print app name and env
        run: |
          echo $APP_NAME
          echo $GETCOHORTS_API_URL
          env
      - name: Install heroku cli
        run: curl https://cli-assets.heroku.com/install.sh | sh
      - name: Create Heroku app
        run: |
          heroku apps:create $APP_NAME
          heroku git:remote -a $APP_NAME
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      - name: Print branches
        run: git branch
      - uses: akhileshns/heroku-deploy@v3.4.6
        name: Deploy to Heroku test app
        with:
          heroku_app_name: $APP_NAME
          heroku_email: "tjwaterman99"
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
      - name: Set up Python
        uses: actions/setup-python@v2.0.0
        with:
          python-version: '3.7'
      - name: Install GetCohorts
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
          pip install .
      - name: Test Heroku App
        run: |
          env
          pytest tests/test_api.py -xq
      - name: Teardown Heroku app
        if: ${{ always() }}
        run: heroku apps:destroy $APP_NAME --confirm $APP_NAME
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      - name: Deploy Heroku production app
        if: github.event_name == 'release' && env.GETHIB_ACTIONS=='true'
        uses: akhileshns/heroku-deploy@v3.4.6
        with:
          heroku_app_name: getcohorts-api-prod
          heroku_email: "tjwaterman99"
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}

  deploy-docs:
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2.0.0
        with:
          python-version: '3.7'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
          pip install .    
      - name: Build
        run: |
          mkdocs build
      - name: Deploy Docs
        if: ${{ github.event_name == 'release' }}
        run: |
          AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID}} AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY}} aws s3 cp --recursive ./site ${{ secrets.DOCS_S3_BUCKET }}
  
  deploy-pypi:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2.0.0
        with:
          python-version: '3.7'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -r requirements.txt
          pip install .
      - name: Build
        run: |
          python setup.py sdist bdist_wheel && ls dist
      - name: Deploy PyPI
        if: ${{ github.event_name == 'release' }}
        run: |
          twine upload \
            --skip-existing \
            --repository ${{ secrets.PYPI_REPOSITORY }}  \
            --username ${{ secrets.PYPI_USERNAME }} \
            --password ${{ secrets.PYPI_ACCESS_TOKEN }} \
            dist/*
